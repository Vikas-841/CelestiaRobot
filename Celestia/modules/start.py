import asyncio
import random
from config import BOT_USERNAME, OWNER_ID
from pyrogram import Client, filters, enums
from Hiroko import Hiroko
from pyrogram.errors import MessageNotModified
from pyrogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton





# ------------------------------------------------------------------------------- #

START_IMG = (
"https://graph.org/file/f035f0e34969c14ae2e8c.jpg",
"https://graph.org/file/68227791cf9273fbede7a.jpg",
"https://graph.org/file/d91ec80b019d43082965d.jpg",
"https://graph.org/file/d6ae49af114fa50d5ba89.jpg",
"https://graph.org/file/30f6cc0b6251afe5c4153.jpg",
"https://telegra.ph/file/0214edaebad6ef6d69c1d.jpg",
"https://telegra.ph/file/f658925a255bea26efaa4.jpg",
"https://telegra.ph/file/235e4c7e9dd0c48bac638.jpg",

)



# ------------------------------------------------------------------------------- #

START_TEXT = """
** ú·¥á è ·¥õ ú·¥á Ä·¥á [{}](tg://user?id={}) …¥…™·¥Ñ·¥á ·¥õ·¥è ·¥ç·¥á·¥á·¥õ  è·¥è·¥ú !**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ**
‡πè …™ ·¥Ä·¥ç Àπ ú…™Íùõ·¥è·¥ã·¥è Íùõ·¥è ô·¥è·¥õÀº ·¥Ä…¥·¥Ö …™  ú·¥Ä·¥†·¥á s·¥ò·¥á·¥Ñ…™·¥Ä ü “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás
‡πè …™ ·¥Ä·¥ç ·¥Ö…™“ì“ì·¥á Ä·¥á…¥·¥õ “ì Ä·¥è·¥ç ·¥Ä…¥·¥è·¥õ ú·¥á Ä ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥è·¥õs

‡πè ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ú·¥á ü·¥©  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥ç è ·¥ç·¥è·¥Ö·¥ú ü·¥ás ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös**
"""


# ------------------------------------------------------------------------------- #

HELP_TEXT = """**
¬ª Àπ ú…™Íùõ·¥è·¥ã·¥è Íùõ·¥è ô·¥è·¥õÀº ·¥Ñ·¥è·¥è ü ·¥è Ä ·¥áx·¥Ñ ü·¥ús…™·¥†·¥á “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás 
"""

DEVS_SECTION = """
** Àπ ú…™Íùõ·¥è·¥ã·¥è Íùõ·¥è ô·¥è·¥õÀº ·¥Ö·¥á·¥†s ·¥è Ä ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á Ä s·¥á·¥Ñ·¥õ…™·¥è…¥**
"""

# ------------------------------------------------------------------------------- #

hiroko_buttons = [              
                [
                    InlineKeyboardButton("·¥Ä“ì·¥ã", callback_data="maintainer_"),   
                    InlineKeyboardButton("·¥Ä·¥Ñ·¥õ…™·¥è…¥", callback_data="maintainer_"),
                    InlineKeyboardButton("“ì·¥ú…¥", callback_data="maintainer_")
                ],
                [
                    InlineKeyboardButton("…¢·¥Ä·¥ç·¥ás", callback_data="maintainer_"),   
                    InlineKeyboardButton("…™·¥ç·¥Ä…¢·¥ás", callback_data="maintainer_"),
                    InlineKeyboardButton("…¢ Ä·¥è·¥ú·¥òs", callback_data="maintainer_")
                ],
                [
                    InlineKeyboardButton("·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ", callback_data="maintainer_"),   
                    InlineKeyboardButton("·¥ç…™s·¥Ñ", callback_data="maintainer_"),
                    InlineKeyboardButton("…™·¥ç·¥ò·¥ès·¥õ·¥á Ä", callback_data="maintainer_")
                ],
                [
                    InlineKeyboardButton("·¥Ñ ú·¥Ä·¥õ…¢·¥ò·¥õ", callback_data="maintainer_"),   
                    InlineKeyboardButton("·¥Ä…™", callback_data="maintainer_"),
                    InlineKeyboardButton("·¥ç·¥ús…™·¥Ñ", callback_data="maintainer_")
                ],
                [
                    InlineKeyboardButton("·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á", callback_data="maintainer_"),   
                    InlineKeyboardButton("…¥·¥è·¥õ·¥ás", callback_data="maintainer_"),
                    InlineKeyboardButton("“ì…™ ü·¥õ·¥á Äs", callback_data="maintainer_")
                ],
                [
                    InlineKeyboardButton("‚ü≤  ô·¥Ä·¥Ñ·¥ã ‚ü≥", callback_data="home_"),
                    InlineKeyboardButton("‚ü≤ ·¥Ñ ü·¥èÍú±·¥á ‚ü≥", callback_data="close_data")
                ]
                ]


back_buttons  = [[
                    InlineKeyboardButton("‚ü≤  ô·¥Ä·¥Ñ·¥ã ‚ü≥", callback_data="help_"),                    
                ]]


devs_buttons  = [[
                    InlineKeyboardButton("·¥ã…™·¥õ·¥è", url="https://t.me/KIRITO1240"),
                    InlineKeyboardButton("…™·¥ç·¥è Ä·¥õ·¥Ä ü", url="https://t.me/ImmortalsKingX"),                    
                ],
                [
                    InlineKeyboardButton("…™s ú…™·¥ã·¥ã…™", url="https://t.me/ishikki_Akabane"),
                    InlineKeyboardButton(" ü·¥á·¥†…™", url="https://t.me/LeviAckerman1709"), 
                ],
                [
              
                    InlineKeyboardButton("‚ü≤  ô·¥Ä·¥Ñ·¥ã ‚ü≥", callback_data="home_"),                    
                ]  
                ]

# ------------------------------------------------------------------------------- #


@Hiroko.on_message(filters.command(["start"], prefixes=["/", "!"]))
async def start(client: Client, message: Message):
    buttons =  [
            [
                InlineKeyboardButton("‚ûï ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚ûï", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
            ],
            [
                InlineKeyboardButton("‚ú® s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚ú®", url="https://t.me/DevsOops"),
                InlineKeyboardButton("üéì ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á Ä", callback_data="hiroko_devs"),
            ],
            [
                InlineKeyboardButton("üìö  ú·¥á ü·¥ò ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös üìö", callback_data="help_")
            ]    
        ]
                                    
    reply_markup = InlineKeyboardMarkup(buttons)
    if message.chat.type == enums.ChatType.PRIVATE:
        await message.reply_photo(
            photo=random.choice(START_IMG),
            caption=START_TEXT.format(message.from_user.first_name, message.from_user.id),
            reply_markup=reply_markup
        )
    else:
        btn = InlineKeyboardMarkup([[
            InlineKeyboardButton("·¥ò·¥ç ·¥ç·¥á", url=f"http://t.me/{BOT_USERNAME}?start")]])
        await message.reply(
            f" ú·¥á è {message.from_user.mention} ·¥ò·¥ç ·¥ç·¥á …™“ì  è·¥è·¥ú …™…¥·¥õ Ä·¥ás·¥õ·¥á·¥Ö.",
            reply_markup=btn
        )



# ------------------------------------------------------------------------------- #

@Hiroko.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    if query.data=="home_":
        buttons =  [
            [
                InlineKeyboardButton("‚ûï ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚ûï", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
            ],
            [
                InlineKeyboardButton("‚ú® s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚ú®", url="https://t.me/TheNixaSupport"),
                InlineKeyboardButton("üéì ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á Ä", callback_data="hiroko_devs"),
            ],
            [
                InlineKeyboardButton("üìö  ú·¥á ü·¥ò ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös üìö", callback_data="help_")
            ]    
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        try:
            await query.edit_message_text(
                START_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass


# ------------------------------------------------------------------------------- #
        
    elif query.data=="help_":        
        reply_markup = InlineKeyboardMarkup(hiroko_buttons)
        try:
            await query.edit_message_text(
                HELP_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass



    elif query.data=="hiroko_devs":        
        reply_markup = InlineKeyboardMarkup(devs_buttons)
        try:
            await query.edit_message_text(
                DEVS_SECTION.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass
  
# ------------------------------------------------------------------------------- #

    elif query.data=="maintainer_":
            await query.answer(("s·¥è·¥è…¥.... \n  ô·¥è·¥õ ·¥ú…¥·¥Ö·¥á Ä …™…¥ ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥Ä…¥·¥Ñ·¥á "), show_alert=True)

  
# ------------------------------------------------------------------------------- #
 
    elif query.data=="close_data":
        try:
            await query.message.delete()
            await query.message.reply_to_message.delete()
        except:
            pass
          

